import pandas as pd
import numpy as np
import seaborn as sns
##############################QUESTION 3###################################################

indicators = ['Approved', 'Disapproved', 'No Answer']
time = pd.date_range('1999-08','2020-08', freq='MS').strftime("%Y-%b").tolist()
approved = [31,53,65,80,79,84,75,70,77,72,61,72,65,65,64,70,68,76,69,75,70,71,72,72,74,73,75,80,73,75,75,72,71,75,75,73,76,77,77,83,82,75,76,75,73,70,77,78,74,75,73,81,86,79,82,81,79,76,72,72,68,72,72,69,69,65,66,66,66,69,66,67,70,70,71,76,73,71,75,72,72,76,77,79,78,75,77,81,78,80,81,81,79,80,81,85,82,79,82,84,87,86,85,85,86,80,83,80,83,88,83,86,83,83,78,78,76,78,79,78,82,81,78,79,83,78,80,78,78,80,78,77,78,77,77,78,79,72,73,69,71,69,69,68,68,68,66,67,63,64,65,68,67,69,64,67,63,67,67,63,65,62,65,63,63,64,63,65,63,64,64,61,65,65,69,80,82,83,86,85,84,86,88,85,85,85,86,85,86,86,89,87,83,84,88,85,85,82,81,82,82,80,81,82,82,82,84,86,84,85,84,82,82,81,81,83,83,83,82,81,82,80,76,80,82,79,67,70,67,66,66,66,64,64,64,66,66,68,68,67,68,70,68,68,68,69,63,59,59,60,60,66,69]
disapproved = [33,27,20,12,13,10,17,21,15,17,26,17,26,27,26,22,23,18,21,19,25,22,22,22,19,21,19,18,19,19,20,24,22,20,20,20,20,20,19,15,16,22,22,21,24,27,22,19,23,22,24,18,13,20,17,16,19,21,25,25,30,26,26,29,28,32,32,26,31,29,32,31,27,28,26,23,25,27,23,26,26,23,21,19,21,22,22,18,21,19,18,18,19,18,18,14,16,20,16,15,12,13,13,13,12,15,13,17,15,10,14,12,15,14,20,20,21,18,19,19,16,18,20,19,15,21,19,20,20,19,20,21,20,21,20,19,19,25,25,29,27,29,30,31,30,31,31,32,36,34,34,31,32,30,34,32,35,31,32,36,35,37,34,36,37,35,35,35,36,35,35,37,34,34,30,18,17,16,13,14,15,14,11,14,14,15,13,14,13,13,10,12,17,15,12,14,14,18,19,17,17,19,18,17,18,18,16,14,15,14,15,17,18,18,18,15,15,17,17,18,17,18,22,19,17,20,32,30,33,33,33,33,34,35,34,33,32,31,31,31,31,29,31,31,31,30,36,33,34,35,33,33,30]

noans = []
for i in np.arange(253):
    add = approved[i] + disapproved[i]
    diff = 100 - add
    noans.append(diff)
    

table_dict = {'Date': time,'Approved': approved, 'Disapproved': disapproved, 'No Answer': noans}

##############################QUESTION 4###################################################
def bootstrap(data, iterations):
    sample_means = [np.mean(np.random.choice(data, len(data))) for _ in range(iterations)]
    sns.distplot(sample_means);